"""
    loadtraj(traj::String, topo::String, selec::String, freq::Int=1; showinfo::Bool=false)

Load NAMD trajectory.

# Arguments:
- `traj::String`: name of trajectory file.
- `topo::String`: name of topology file.
- `selec::String`: structure in the trajectory to load.
- `freq::Int=1`: trajectory loading frequence.
"""
function loadtraj(traj::String, topo::String, selec::String, 
         freq::Int=1; showinfo::Bool=false)

    # Load trajectory
    # Note that the frame index of trajectory starts at 0, and ends at (t.n_frames - 1)
    t = md.load("$traj", top="$topo", stride=freq)
    atoms_old = t.n_atoms
    frames_old = t.n_frames
    residues_old = t.n_residues
    topology = t.topology
    selection = topology.select("$selec")
    t.restrict_atoms(selection)
    # Join: t = md.join([t1, t2, t3])
    # Save: get(t,1).save_pdb("aaa.pdb")
    atoms = t.n_atoms
    frames = t.n_frames
    residues = t.n_residues
    
    if showinfo
    println("trajectory loaded!")
    @info "
    There are $atoms_old atoms, $residues_old residues, $frames_old frames in the trajectory.
    Your selections is \"$selec\".
    Under such selection, there are $atoms atoms, $residues residues, $frames frames in the trajectory.
    \t"
    end

return t
end

"""
    convtraj(traj_info::String)

Convert trajectories into one long trajectory using CatDCD.

# Arguments:
- `traj_info::String`: trajectory information file generated by CMdMD
- `freq::Int=1`: frequence of loading the short trajectories.

See also: [`convtraj_all`](@ref)
"""
function convtraj(traj_info::String, freq::Int=1)

    sequence_org = readdlm(traj_info)
    numtrajs = size(sequence_org,1)
    # traj = md.load("./ITER_1/ITER_1.dcd", top="./ITER_1/ITER_1.psf", frame=0)
    # for i = 1:numtrajs
    #    traj_tmp = loadtraj("./ITER_$i/ITER_$i.dcd","./ITER_$i/ITER_$i.psf","all",1)
    #    traj = md.join([traj, get(traj_tmp,1:sequence_org[i,2],nothing)])
    # end
    # traj.save_dcd("all.dcd")
    println("Dividing origin trajectories...")
    comm = ["catdcd" "-o" "all.dcd" "-stride" freq "-dcd"]
    for i = 1:numtrajs
        traj_tmp = loadtraj("./ITER_$i/ITER_$i.dcd","./ITER_$i/ITER_$i.psf","all",1)
        get(traj_tmp,1:sequence_org[i,2],nothing).save_dcd("ITER_$i.dcd")
        comm = [comm "ITER_$i.dcd"]
    end
    # Run catdcd
    println("Runing Catdcd ...")
    run(`$comm`)
    # Clean 
    println("Cleaning ...")
    for i = 1:numtrajs
        rm("ITER_$i.dcd")
    end

return nothing
end

"""
    convtraj_all(traj_info::String)

Convert trajectories into one long trajectory using CatDCD (put all frames 
in short trajectories in the long trajectory.)

# Arguments:
- `traj_info::String`: trajectory information file generated by CMdMD
- `freq::Int=1`: frequence of loading the short trajectories.

See also: [`convtraj`](@ref)
"""
function convtraj_all(traj_info::String, freq::Int=1)
    
    println("Dividing origin trajectories...")
    sequence_org = readdlm(traj_info)
    numtrajs = size(sequence_org,1)
    comm = ["catdcd" "-o" "all.dcd" "-stride" freq "-dcd"]
    for i = 1:numtrajs
        comm = [comm "./ITER_$i/ITER_$i.dcd"]
    end
    println("Runing Catdcd ...")
    run(`$comm`)

return nothing
end