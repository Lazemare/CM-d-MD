"""
    read_conf_namd(configfile::String)

Read the NAMD configure file. Return name of coordinate file and topology file.
"""
function read_conf_namd(configfile::String)

    NAMDconf = readdlm(configfile)
    coord = ""
    topo = ""
    flag = 0; flag_1 = 0
    for i = 1:size(NAMDconf,1)
        # Read initial coordinate and structure file.
        if NAMDconf[i,1] |> lowercase == "coordinates"
            coord = NAMDconf[i,2]
        elseif NAMDconf[i,1] |> lowercase == "structure"
            topo = NAMDconf[i,2]
        # Give out errors.
        elseif NAMDconf[i,1] |> lowercase == "bincoordinates"
            error("""CMdMD only accept pdb format coordinate file!
                Please comment out the \"bincoordinates\" keyword in your input file.
                If the .coor file does contain the initial coordinate you want to use,
                please convert it to .pdb file by VMD, then use the pdb file as your input.
            """)
        elseif NAMDconf[i,1] |> lowercase == "velocities"
            error("You should defined the \"temperature\" keyword instead of \"velocities\"")
        elseif NAMDconf[i,1] |> lowercase == "binvelocities"
            error("You should defined the \"temperature\" keyword instead of \"binvelocities\"")
        elseif NAMDconf[i,1] |> lowercase == "minimize"
            error("DM-d-MD require pure production run, the \"minimize\" keyword has benn commented out")
        end
    end

return coord, topo
end

"""
    write_conf_namd(configfile::String, output::String, coord::String, topo::String,
    steps::Int, dcdfreq::Int)

Write the NAMD configure file with given coordinates.

# Arguments:
- `configfile::String`: name of the configure file to write.
- `output::String`: NAMD output files name.
- `coord::String`: name of the coordinate file.
- `topo::String`: name of the topology file.
- `steps::Int`: steps to run.
- `dcdfreq::Int`: frequency of writing DCD file.
"""
function write_conf_namd(configfile::String, output::String, coord::String, topo::String,
                         steps::Int, dcdfreq::Int)

    rm("$output.conf",force=true)
    NAMDconf = readdlm(configfile,skipblanks=false)
    NAMDconfstring = readlines(configfile)
    open("$output.conf", "w") do io
        write(io,"### This file is generated by DM-d-MD package automatically. ###\n");
        for i = 1:size(NAMDconf,1)
            if NAMDconf[i,1] |> lowercase == "outputname"
                @printf io "%s        %s\n" "outputName" "$output"
            elseif NAMDconf[i,1] |> lowercase == "restartname"
                @printf io "%s       %s\n" "restartname" "$output"
            elseif NAMDconf[i,1] |> lowercase == "coordinates"
                @printf io "%s       %s\n" "coordinates" "$coord"
            elseif NAMDconf[i,1] |> lowercase == "structure"
                @printf io "%s         %s\n" "structure" "$topo"
            elseif NAMDconf[i,1] |> lowercase == "dcdfile"
                @printf io "%s           %s\n" "DCDFile" "$output.dcd"
            elseif NAMDconf[i,1] |> lowercase == "dcdfreq"
                @printf io "%s           %s\n" "DCDFreq" "$dcdfreq"
            elseif NAMDconf[i,1] |> lowercase == "xstfreq"
                @printf io "%s           %s\n" "XSTFreq" "$dcdfreq"
            elseif NAMDconf[i,1] |> lowercase == "xstfile"
                @printf io "%s           %s\n" "xstFile" "$output.xst"
            elseif NAMDconf[i,1] |> lowercase == "run"
                @printf io "%s               %s\n" "run" "$steps"
            else
                write(io,NAMDconfstring[i],"\n")
            end
        end
    end
    println("NAMD configure file $output.conf has been written!")

return nothing
end

"""
    runnamd(configfile::String, nproc::Int, gpu::Union{String,Int}=-1)

Run NAMD job.

# Arguments:
- `configfile::String`: name of the configure file.
- `nproc::Int`: number of CPU cores to use.
- `gpu::Union{String,Int}=-1`: GPUs to use, -1 for do not use GPU.
"""
function runnamd(configfile::String,nproc::Int,gpu::Union{String,Int}=-1)

    # Run namd2 executable file
    if gpu == -1 || gpu == "-1"
        NAMD = `namd2 +p $nproc $configfile`
    else
        NAMD = `namd2 +p $nproc +devices $gpu $configfile`
    end
    run(pipeline(NAMD, stdout="NAMD.log", stderr="ERROR.log"));

return nothing
end
